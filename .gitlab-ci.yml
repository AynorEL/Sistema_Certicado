# ========================================
# GITLAB CI/CD - SISTEMA DE CERTIFICADOS
# ========================================

stages:
  - validate
  - test
  - build
  - deploy-staging
  - deploy-production

variables:
  PHP_VERSION: "8.1"
  NODE_VERSION: "18"
  DOCKER_REGISTRY: "$CI_REGISTRY"
  IMAGE_NAME: "certificados"
  IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"

# ========================================
# VALIDACIÓN DE CÓDIGO
# ========================================
validate:
  stage: validate
  image: php:8.1-cli
  services:
    - docker:dind
  before_script:
    - apt-get update && apt-get install -y git unzip curl
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
  script:
    - composer install --prefer-dist --no-progress
    - composer require --dev squizlabs/php_codesniffer phpmd/phpmd phpstan/phpstan
    - ./vendor/bin/phpcs --standard=PSR12 --extensions=php --ignore=vendor/ .
    - ./vendor/bin/phpmd . text cleancode,codesize,controversial,design,naming,unusedcode --exclude vendor/
    - ./vendor/bin/phpstan analyse --level=5 --no-progress .
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "main"

# ========================================
# PRUEBAS UNITARIAS
# ========================================
unit-tests:
  stage: test
  image: php:8.1-cli
  services:
    - mysql:8.0
  variables:
    MYSQL_ROOT_PASSWORD: root
    MYSQL_DATABASE: certificados_test
    DB_HOST: mysql
    DB_PORT: 3306
    DB_DATABASE: certificados_test
    DB_USERNAME: root
    DB_PASSWORD: root
  before_script:
    - apt-get update && apt-get install -y git unzip curl default-mysql-client
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    - composer install --prefer-dist --no-progress
    - composer require --dev phpunit/phpunit
    - sleep 30 # Esperar a que MySQL esté listo
  script:
    - ./vendor/bin/phpunit --coverage-clover=coverage.xml
  coverage: '/^\s*Lines:\s*(\d+\.\d+)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "main"

# ========================================
# PRUEBAS DE INTEGRACIÓN
# ========================================
integration-tests:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker-compose -f docker-compose.test.yml up -d
    - sleep 60 # Esperar a que los servicios estén listos
  script:
    - docker run --rm --network certificados-network
      -v $CI_PROJECT_DIR:/app
      php:8.1-cli
      bash -c "
      composer install --prefer-dist --no-progress
      ./vendor/bin/phpunit --testsuite=integration
      "
  after_script:
    - docker-compose -f docker-compose.test.yml down
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "main"

# ========================================
# CONSTRUCCIÓN DE IMAGEN DOCKER
# ========================================
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG .
    - docker build -t $DOCKER_REGISTRY/$IMAGE_NAME:latest .
    - |
      if [ "$CI_COMMIT_BRANCH" != "main" ]; then
        docker tag $DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG $DOCKER_REGISTRY/$IMAGE_NAME:$CI_COMMIT_REF_SLUG
      fi
    - docker push $DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
    - docker push $DOCKER_REGISTRY/$IMAGE_NAME:latest
    - |
      if [ "$CI_COMMIT_BRANCH" != "main" ]; then
        docker push $DOCKER_REGISTRY/$IMAGE_NAME:$CI_COMMIT_REF_SLUG
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "main"

# ========================================
# PRUEBAS DE IMAGEN
# ========================================
test-image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker run -d --name test-container -p 8080:80 $DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
    - sleep 30
    - curl -f http://localhost:8080/health.php
    - curl -f http://localhost:8080/
    - curl -f http://localhost:8080/admin/
    - docker stop test-container
    - docker rm test-container
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "main"

# ========================================
# DESPLIEGUE A STAGING
# ========================================
deploy-staging:
  stage: deploy-staging
  image: alpine:latest
  before_script:
    - apk add --no-cache curl lftp
  script:
    - |
      # Crear build para staging
      mkdir -p build/certificado
      cp -r admin assets vendor payment PHPMailer *.php .htaccess composer.* build/certificado/

      # Excluir archivos de desarrollo
      rm -rf build/certificado/admin/temp/*
      rm -rf build/certificado/admin/img/qr/*
      rm -f build/certificado/test_*.php
      rm -f build/certificado/debug_*.php

      # Desplegar via FTP
      lftp -c "
        set ssl:verify-certificate no;
        open -u $FTP_USER,$FTP_PASSWORD $FTP_HOST;
        mirror --reverse --only-newer --delete ./build/certificado/ /staging/;
      "
  environment:
    name: staging
    url: https://$FTP_HOST/staging
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

# ========================================
# PRUEBAS DE STAGING
# ========================================
staging-tests:
  stage: deploy-staging
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - curl -f https://$FTP_HOST/staging/
    - curl -f https://$FTP_HOST/staging/admin/
    - curl -f https://$FTP_HOST/staging/verificar-certificado.php
    - curl -f https://$FTP_HOST/staging/health.php
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

# ========================================
# DESPLIEGUE A PRODUCCIÓN
# ========================================
deploy-production:
  stage: deploy-production
  image: alpine:latest
  before_script:
    - apk add --no-cache curl lftp
  script:
    - |
      # Crear backup antes del despliegue
      lftp -c "
        set ssl:verify-certificate no;
        open -u $FTP_USER,$FTP_PASSWORD $FTP_HOST;
        mirror --reverse --only-newer --delete ./backup/ /backup_$(date +%Y%m%d_%H%M%S)/;
      "

      # Crear build para producción
      mkdir -p build/certificado
      cp -r admin assets vendor payment PHPMailer *.php .htaccess composer.* build/certificado/

      # Excluir archivos de desarrollo
      rm -rf build/certificado/admin/temp/*
      rm -rf build/certificado/admin/img/qr/*
      rm -f build/certificado/test_*.php
      rm -f build/certificado/debug_*.php

      # Desplegar via FTP
      lftp -c "
        set ssl:verify-certificate no;
        open -u $FTP_USER,$FTP_PASSWORD $FTP_HOST;
        mirror --reverse --only-newer --delete ./build/certificado/ /public_html/;
      "
  environment:
    name: production
    url: https://$FTP_HOST
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual

# ========================================
# MONITOREO POST-DESPLIEGUE
# ========================================
monitoring:
  stage: deploy-production
  image: alpine:latest
  before_script:
    - apk add --no-cache curl apache2-utils
  script:
    - curl -f https://$FTP_HOST/health.php
    - curl -f https://$FTP_HOST/admin/health.php
    - ab -n 100 -c 10 https://$FTP_HOST/
    - curl -f https://$FTP_HOST/security-scan.php
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual

# ========================================
# ROLLBACK AUTOMÁTICO
# ========================================
rollback:
  stage: deploy-production
  image: alpine:latest
  before_script:
    - apk add --no-cache curl lftp
  script:
    - |
      # Restaurar desde backup usando FTP
      lftp -c "
        set ssl:verify-certificate no;
        open -u $FTP_USER,$FTP_PASSWORD $FTP_HOST;
        mirror --reverse --only-newer --delete /backup_latest/ /public_html/;
      "
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
      allow_failure: true
